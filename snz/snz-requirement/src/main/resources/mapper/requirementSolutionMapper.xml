<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 供应商对于采购商的需求的整体方案 -->
<mapper namespace="RequirementSolution">
    <resultMap id="requirementSolutionMap" type="RequirementSolution">
        <id property="id" column="id"/>
        <result property="userId" column="user_id"/>
        <result property="requirementId" column="requirement_id"/>
        <result property="requirementName" column="requirement_name"/>
        <result property="supplierId" column="supplier_id"/>
        <result property="supplierName" column="supplier_name"/>
        <result property="technology" column="technology"/>
        <result property="quality" column="quality"/>
        <result property="reaction" column="reaction"/>
        <result property="delivery" column="delivery"/>
        <result property="cost" column="cost"/>
        <result property="notAccept" column="not_accept"/>
        <result property="solutionFile" column="solution_file"/>
        <result property="quotationFile" column="quotation_file"/>
        <result property="topicId" column="topic_id"/>
        <result property="status" column="status"/>
        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <sql id="columns">
        user_id, requirement_id, requirement_name, supplier_id, supplier_name, technology, quality, reaction, delivery, cost,
        not_accept, solution_file, quotation_file, topic_id, status, created_at, updated_at
    </sql>

    <sql id="queryColumns">
        user_id, requirement_id, requirement_name, supplier_id, supplier_name, technology, quality, reaction, delivery, cost, not_accept,
        solution_file, quotation_file, topic_id, snz_requirement_solutions.status, snz_requirement_solutions.created_at, snz_requirement_solutions.updated_at
    </sql>

    <insert id="create" parameterType="requirementSolution" useGeneratedKeys="true" keyProperty="id">
        insert into snz_requirement_solutions (<include refid="columns"/>) values (#{userId}, #{requirementId}, #{requirementName}, #{supplierId}, #{supplierName},
        #{technology}, #{quality}, #{reaction}, #{delivery}, #{cost},  #{notAccept}, #{solutionFile}, #{quotationFile}, #{topicId}, #{status}, now(), now())
    </insert>

    <update id="update" parameterType="requirementSolution">
        update snz_requirement_solutions
        <set>
            <if test="technology!=null">technology=#{technology},</if>
            <if test="quality!=null">quality=#{quality},</if>
            <if test="reaction!=null">reaction=#{reaction},</if>
            <if test="delivery!=null">delivery=#{delivery},</if>
            <if test="cost!=null">cost=#{cost},</if>
            <if test="notAccept!=null">not_accept=#{notAccept},</if>
            <if test="notAccept==null">not_accept=#{notAccept},</if>
            <if test="solutionFile!=null">solution_file=#{solutionFile},</if>
            <if test="quotationFile!=null">quotation_file=#{quotationFile},</if>
            <if test="topicId!=null">topic_id=#{topicId},</if>
            <if test="status!=null">status=#{status},</if>
            updated_at = now()
        </set>
        where id=#{id}
    </update>

    <delete id="delete" parameterType="long">
        delete from snz_requirement_solutions where id=#{id}
    </delete>

    <select id="findById" parameterType="long" resultMap="requirementSolutionMap">
        select id, <include refid="columns"/>
        from snz_requirement_solutions where id=#{id}
    </select>

    <select id="findByRequirementId" parameterType="map" resultMap="requirementSolutionMap">
        select id, <include refid="columns"/>
        from snz_requirement_solutions where requirement_id=#{requirementId} and supplier_id=#{supplierId}
    </select>

    <select id="findByUserId" parameterType="map" resultMap="requirementSolutionMap">
        select id, <include refid="columns"/>
        from snz_requirement_solutions where requirement_id=#{requirementId} and user_id=#{userId}
    </select>

    <select id="findAllSolution" parameterType="long" resultMap="requirementSolutionMap">
        select id, <include refid="columns"/>
        from snz_requirement_solutions where requirement_id=#{requirementId} and supplier_id != 0
    </select>

    <!-- 查询可以进入需求的方案终投阶段的全部供应商方案(排除系统的最优方案选取,0:默认是系统的最优方案,方案必须是：1.资质检查通过) -->
    <select id="findSolutionEnds" parameterType="map" resultMap="requirementSolutionMap">
        select id, <include refid="columns"/>
        from snz_requirement_solutions
        <where>
            requirement_id=#{requirementId}
            <if test="supplierIds!=null"><include refid="filterSupplier"/></if>
            <if test="status!=null">and status = ${status}</if>
            <if test="supplierIds==null">and supplier_id != 0</if>
            <include refid="sortSQL"/>
        </where>
    </select>

    <sql id="sortSQL">
        <if test="sortType==1">order by technology desc</if>
        <if test="sortType==2">order by quality desc</if>
        <if test="sortType==3">order by reaction</if>
        <if test="sortType==4">order by delivery</if>
        <if test="sortType==5">order by cost</if>
    </sql>

    <sql id="filterSupplier">
        and supplier_id in
        <foreach collection="supplierIds" separator="," open="(" close=")" item="id">
            #{id}
        </foreach>
    </sql>

    <!-- 需求纬度查询需求下的全部方案信息列表(排除系统的最优方案选取,0:默认是系统的最优方案) -->
    <select id="findSolutionCount" parameterType="map" resultType="long">
        select count(id)
        from snz_requirement_solutions
        <where>
            supplier_id != 0
            <if test="requirementId!=null"> and requirement_id=#{requirementId} </if>
            <if test="supplierId!=null"> and supplier_id=#{supplierId} </if>
            <if test="supplierName!=null"> and supplier_name=#{supplierName} </if>
            <if test="statusArray!=null"><include refid="filterStatus"/></if>
            <if test="min_time!=null"> and <![CDATA[ created_at >= #{min_time} ]]></if>
            <if test="max_time!=null"> and <![CDATA[ created_at <= #{max_time} ]]></if>
        </where>
    </select>

    <select id="findByParams" parameterType="map" resultMap="requirementSolutionMap">
        select id, <include refid="columns"/>
        from snz_requirement_solutions
        <where>
            supplier_id != 0
            <if test="requirementId!=null"> and requirement_id=#{requirementId} </if>
            <if test="supplierId!=null"> and supplier_id=#{supplierId} </if>
            <if test="supplierName!=null"> and supplier_name=#{supplierName} </if>
            <if test="statusArray!=null"><include refid="filterStatus"/></if>
            <if test="start!=null"> and <![CDATA[ created_at >= #{min_time} ]]></if>
            <if test="max_time!=null"> and <![CDATA[ created_at <= #{max_time} ]]></if>
        </where>
        limit #{offset}, #{limit};
    </select>

    <sql id="filterStatus">
        and status in
        <foreach collection="statusArray" separator="," open="(" close=")" item="status">
            #{status}
        </foreach>
    </sql>

    <select id="findByParamsWithNoLimit" parameterType="map" resultMap="requirementSolutionMap">
        SELECT id, <include refid="columns"/>
        FROM snz_requirement_solutions
        <where>
            supplier_id != 0
            <if test="requirementId!=null"> and requirement_id=#{requirementId} </if>
            <if test="supplierId!=null"> and supplier_id=#{supplierId} </if>
        </where>
    </select>
</mapper>