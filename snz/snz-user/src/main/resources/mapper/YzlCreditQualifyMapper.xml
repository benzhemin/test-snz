<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="YzlCreditQualify">
    <resultMap id="YzlCreditQualifyMap" type="YzlCreditQualify">
        <id property="id" column="id"/>

        <result property="userId" column="user_id"/>
        <result property="supplierId" column="supplier_id"/>
        <result property="status" column="status"/>
        <result property="message" column="message"/>
        <result property="appealMsg" column="appeal_msg"/>
        <result property="reviewer" column="reviewer"/>
        <result property="reviewerName" column="reviewer_name"/>

        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <sql id="columns">
        user_id, supplier_id, status, message, appeal_msg, reviewer, reviewer_name, created_at, updated_at
    </sql>

    <select id="selectByStatus" resultMap="YzlCreditQualifyMap">
        select id, <include refid="columns"/>
        from snz_supplier_credit_qualifies where status = #{status}
    </select>

    <delete id="deleteById" parameterType="int">
        delete from snz_supplier_credit_qualifies where id = #{id}
    </delete>

    <insert id="create" parameterType="YzlCreditQualify" useGeneratedKeys="true" keyProperty="id">
        insert into snz_supplier_credit_qualifies (supplier_id,user_id,status,message,created_at,updated_at)
        values (#{supplierId},#{userId},#{status},#{message},now(),now())
    </insert>

    <update id="update" parameterType="SupplierCreditQualify">
        update `snz_supplier_credit_qualifies`
        <set>
            <if test="userId"> user_id=#{userId}, </if>
            <if test="supplierId"> supplier_id=#{supplierId}, </if>
            <if test="status"> status=#{status}, </if>
            <if test="message"> message=#{message}, </if>
            <if test="appealMsg"> appeal_msg=#{appealMsg}, </if>
            updated_at = now()
        </set>
        where id = #{id}
    </update>
    
    <delete id="deleteByIds" parameterType="list">
        delete from snz_supplier_credit_qualifies
        where id in
        <foreach collection="list" open="(" separator="," close=")" item="id">#{id}</foreach>
    </delete>
    
    <insert id="creates">
        insert into snz_supplier_credit_qualifies (supplier_id,user_id,status,message,created_at,updated_at)
        values
        <foreach collection="list" item="item" index="index" separator=",">
            (#{item.supplierId}, #{item.userId}, #{item.status}, #{item.message}, now(), now())
        </foreach>
    </insert>
    
    <select id="countBy" resultType="long">
        select count(1)
        from snz_supplier_credit_qualifies
        where <if test="status!=null">status = #{status} </if>
              <if test="message!=null">and message like CONCAT(CONCAT('%', #{message}), '%') </if>
    </select>
    
    <select id="findBy" resultMap="YzlCreditQualifyMap">
        select id, <include refid="columns"/>
        from snz_supplier_credit_qualifies
        where <if test="status!=null">status = #{status} </if>
        <if test="message!=null">and message like CONCAT(CONCAT('%', #{message}), '%') </if>
        order by id desc
        limit #{offset}, #{limit}
    </select>
</mapper>
