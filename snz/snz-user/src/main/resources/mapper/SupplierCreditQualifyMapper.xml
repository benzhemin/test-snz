<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="SupplierCreditQualify">
    <resultMap id="SupplierCreditQualifyMap" type="SupplierCreditQualify">
        <id property="id" column="id"/>

        <result property="userId" column="user_id"/>
        <result property="supplierId" column="supplier_id"/>
        <result property="status" column="status"/>
        <result property="message" column="message"/>
        <result property="appealMsg" column="appeal_msg"/>
        <result property="reviewer" column="reviewer"/>
        <result property="reviewerName" column="reviewer_name"/>

        <result property="createdAt" column="created_at"/>
        <result property="updatedAt" column="updated_at"/>
    </resultMap>

    <sql id="columns">
        user_id, supplier_id, status, message, appeal_msg, reviewer, reviewer_name, created_at, updated_at
    </sql>

    <insert id="create" parameterType="SupplierCreditQualify" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO `snz_supplier_credit_qualifies`
        (<include refid="columns"/>)
        VALUES
        ( #{userId}, #{supplierId}, #{status}, #{message}, #{appealMsg}, #{reviewer}, #{reviewerName}, now(), now())
    </insert>

    <update id="update" parameterType="SupplierCreditQualify">
        update `snz_supplier_credit_qualifies`
        <set>
            <if test="userId"> user_id=#{userId}, </if>
            <if test="supplierId"> supplier_id=#{supplierId}, </if>
            <if test="status"> status=#{status}, </if>
            <if test="message"> message=#{message}, </if>
            <if test="appealMsg"> appeal_msg=#{appealMsg}, </if>
            <if test="reviewer"> reviewer=#{reviewer}, </if>
            <if test="reviewerName"> reviewer_name=#{reviewerName}, </if>
            updated_at = now()
        </set>
        where id = #{id}
    </update>

    <select id="findById" resultMap="SupplierCreditQualifyMap">
        select id,
        <include refid="columns"/>
        from `snz_supplier_credit_qualifies` where id=#{id}
        limit 1
    </select>

    <select id="findBy" resultMap="SupplierCreditQualifyMap">
        select id,
        <include refid="columns"/>
        from `snz_supplier_credit_qualifies`
        <where>
            <if test="userId"> and user_id=#{userId} </if>
            <if test="supplierId"> and supplier_id=#{supplierId} </if>
            <if test="status"> and status=#{status} </if>
            <if test="id!=null">and id=#{id}</if>
            <if test="reviewer!=null"> and reviewer=#{reviewer} </if>
            <if test="reviewerName!=null"> and reviewer_name=#{reviewerName} </if>
        </where>
        limit 1
    </select>

    <select id="findByUserId" resultMap="SupplierCreditQualifyMap">
        select id,
        <include refid="columns"/>
        from `snz_supplier_credit_qualifies` where user_id=#{id}
        limit 1
    </select>

    <select id="findByUserIds" resultMap="SupplierCreditQualifyMap">
        select id, <include refid="columns"/>
        from snz_supplier_credit_qualifies where user_id in
        <foreach collection="list" separator="," open="(" close=")" item="id"> #{id} </foreach>
    </select>

    <select id="countForQualify" resultType="long">
        select count(1)
        from `snz_supplier_credit_qualifies`
        where
        <if test="type==null||type==3">status = 11</if>
        <if test="type==0">status = 12</if>
        <if test="type==1"> status &gt; 0 and status &lt;=4</if>
        <if test="type==2"> status &lt; 0 </if>
    </select>

    <select id="pagingForQualify" resultMap="SupplierCreditQualifyMap">
        select id, <include refid="columns"/>
        from `snz_supplier_credit_qualifies` where
        <if test="type==null||type==3">status = 11</if>
        <if test="type==0">status = 12</if>
        <if test="type==1"> status &gt; 0 and status &lt;=4</if>
        <if test="type==2">status &lt; 0 </if>
        limit #{offset}, #{limit}
    </select>

    <select id="countUpComingIn" resultType="long">
        select count(1)
        from `snz_supplier_credit_qualifies`
        where
        updated_at >= #{startAt} and updated_at &lt; #{endAt}
    </select>

    <select id="pagingForUpComingIn" resultMap="SupplierCreditQualifyMap">
        select id, <include refid="columns"/>
        from `snz_supplier_credit_qualifies`
        where
        updated_at >= #{startAt} and updated_at &lt; #{endAt}
        limit #{offset}, #{limit}
    </select>
</mapper>
